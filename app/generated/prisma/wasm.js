
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  avater: 'avater',
  password: 'password',
  ListIds: 'ListIds'
};

exports.Prisma.MusicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  singer: 'singer',
  path: 'path',
  duration: 'duration',
  avater: 'avater',
  ListIds: 'ListIds'
};

exports.Prisma.MusicListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  avater: 'avater',
  type: 'type',
  MusicIds: 'MusicIds',
  UserIds: 'UserIds'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  avater: 'avater',
  url: 'url',
  MusicId: 'MusicId'
};

exports.Prisma.LyricScalarFieldEnum = {
  id: 'id',
  url: 'url',
  MusicId: 'MusicId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Music: 'Music',
  MusicList: 'MusicList',
  Video: 'Video',
  Lyric: 'Lyric'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "E:\\web学习\\nuxt-music-player\\app\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "E:\\web学习\\nuxt-music-player\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id       String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email    String\n  name     String      @unique\n  avater   String\n  password String\n  Lists    MusicList[] @relation(fields: [ListIds], references: [id])\n  ListIds  String[]    @db.ObjectId\n}\n\nmodel Music {\n  id       String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name     String\n  singer   String[]\n  path     String      @unique\n  duration Int\n  avater   String\n  video    Video?\n  lyric    Lyric?\n  Lists    MusicList[] @relation(fields: [ListIds], references: [id])\n  ListIds  String[]    @db.ObjectId\n}\n\nmodel MusicList {\n  id       String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name     String\n  avater   String?\n  type     String // official   user\n  Musics   Music[]  @relation(fields: [MusicIds], references: [id])\n  MusicIds String[] @db.ObjectId\n  Users    User[]   @relation(fields: [UserIds], references: [id])\n  UserIds  String[] @db.ObjectId\n}\n\nmodel Video {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  avater  String\n  url     String @unique\n  Music   Music  @relation(fields: [MusicId], references: [id])\n  MusicId String @unique @db.ObjectId\n}\n\nmodel Lyric {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  url     String @unique\n  Music   Music  @relation(fields: [MusicId], references: [id])\n  MusicId String @unique @db.ObjectId\n}\n",
  "inlineSchemaHash": "24714f4d61b637d852d07027078368e3bc45be711d669eb283406c2e80ae831e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avater\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Lists\",\"kind\":\"object\",\"type\":\"MusicList\",\"relationName\":\"MusicListToUser\"},{\"name\":\"ListIds\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Music\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"singer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"path\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avater\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"video\",\"kind\":\"object\",\"type\":\"Video\",\"relationName\":\"MusicToVideo\"},{\"name\":\"lyric\",\"kind\":\"object\",\"type\":\"Lyric\",\"relationName\":\"LyricToMusic\"},{\"name\":\"Lists\",\"kind\":\"object\",\"type\":\"MusicList\",\"relationName\":\"MusicToMusicList\"},{\"name\":\"ListIds\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"MusicList\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avater\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Musics\",\"kind\":\"object\",\"type\":\"Music\",\"relationName\":\"MusicToMusicList\"},{\"name\":\"MusicIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MusicListToUser\"},{\"name\":\"UserIds\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Video\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"avater\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Music\",\"kind\":\"object\",\"type\":\"Music\",\"relationName\":\"MusicToVideo\"},{\"name\":\"MusicId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Lyric\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Music\",\"kind\":\"object\",\"type\":\"Music\",\"relationName\":\"LyricToMusic\"},{\"name\":\"MusicId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

