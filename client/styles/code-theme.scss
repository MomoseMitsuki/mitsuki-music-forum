@use "sass:map";
@use "variables.scss" as *;

$curThemeName: "";
@mixin useTheme() {
    @each $key, $value in $themes {
        $curThemeName: $key !global;
        html[data-theme="#{$key}"] & {
            @content;
        }
    }
}

@function getVar($varName) {
    // corresponding variable values for the current topic
    $themeMap: map.get($themes, $curThemeName);
    @return map.get($themeMap, $varName);
}

%themeStyle {
    @include useTheme {
        color: getVar("textColor");
        background-color: getVar("bgColor");
    }
}

%svgThemeStyle {
    @include useTheme {
        fill: getVar("textColor");
    }
}

%iconBase {
    @extend %svgThemeStyle;
    cursor: pointer;
    margin: 0 7px;
    transition: transform 0.3s ease;
    &:hover {
        transform: scale(1.1);
    }
}

%scrollThemeStyle {
    &::-webkit-scrollbar {
        width: 6px;
        @include useTheme {
            background-color: getVar("orgBgColor");
        }
    }
    &::-webkit-scrollbar-thumb {
        border-radius: 3px;
        @include useTheme {
            background-color: getVar("selectedColor");
        }
    }
    &::-webkit-scrollbar-thumb:hover {
        border-radius: 3px;
        @include useTheme {
            background-color: getVar("selectedColor");
        }
    }
}
/*
    You can use this method to generate different theme styles
    transition: background-color 0.3s ease, color 0.3s ease;
    @include useTheme {
        color:getVar('textColor');
        background-color:getVar('bgColor');
    }
*/
